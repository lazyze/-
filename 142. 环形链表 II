/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        //if (head == NULL || head->next == NULL) return NULL;
        ListNode *protect = new ListNode;
        protect->next = head;
        ListNode *slow = protect;
        ListNode *quick = protect;
        while (quick != NULL) {
            if (quick->next == NULL) return NULL;
            slow = slow->next;
            quick = quick->next->next;
            if (slow == quick) {
                slow = protect;
                while (slow != quick) {
                    slow = slow->next;
                    quick = quick->next;
                }
                return slow;
            }
        }
        return NULL;
    }
};
